<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>de.quinscape</groupId>
    <artifactId>exceed</artifactId>
    <version>0.2-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>exceed application engine</name>
    <description>data-driven Application engine </description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <spring.security.version>4.2.2.RELEASE</spring.security.version>
        <spring.core.version>4.3.8.RELEASE</spring.core.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- Logging Target End -->

        <!-- DATABASE DEPENDENCIES -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.3-1102-jdbc4</version>
        </dependency>

        <dependency>
            <groupId>com.jolbox</groupId>
            <artifactId>bonecp</artifactId>
            <version>0.8.0.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
            <version>3.6.2</version>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq-codegen</artifactId>
            <version>3.6.2</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.svenson</groupId>
            <artifactId>svenson</artifactId>
            <version>1.5.8</version>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.4</version>
        </dependency>

        <dependency>
            <groupId>com.esotericsoftware</groupId>
            <artifactId>reflectasm</artifactId>
            <version>1.11.1</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.core.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.core.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
            <version>${spring.security.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.core.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.core.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring.security.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>${spring.security.version}</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.1.0.Final</version>
        </dependency>

        <!-- LOGGING DEPENDENCIES -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.7</version>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>18.0</version>
        </dependency>

        <dependency>
            <groupId>org.opensaga</groupId>
            <artifactId>opensaga-dynamic-stylesheets</artifactId>
            <version>3.0.8</version>
        </dependency>

        <dependency>
            <groupId>org.webbitserver</groupId>
            <artifactId>webbit</artifactId>
            <version>0.4.15</version>
        </dependency>

        <dependency>
            <groupId>com.github.ziplet</groupId>
            <artifactId>ziplet</artifactId>
            <version>2.1.2</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.core.version}</version>
        </dependency>

        <!-- COMPILE TIME DEPENDENCIES -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot</artifactId>
            <version>1.5.3.RELEASE</version>
            <!--
            For the main project, we only need spring boot for docs generation, otherwise it's the individual
            exceed projects that have the a dependency to spring-boot
            -->
            <scope>compile</scope>

        </dependency>

        <dependency>
            <groupId>com.github.javaparser</groupId>
            <artifactId>javaparser-core</artifactId>
            <version>2.2.2</version>
            <scope>compile</scope>
        </dependency>

        <!-- TEST DEPENDENCIES -->

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.7</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>1.7.7</version>
            <scope>test</scope>
        </dependency>

        <!-- Logging Target: Log4J 2.0 -->

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.0.2</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.0.2</version>
            <scope>test</scope>
        </dependency>
        <!-- Logging Target End -->

        <!-- TEST DEPENDENCIES -->

        <!-- TESTING DEPENDENCIES -->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.core.version}</version>
            <type>jar</type>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <repositories>
        <repository>
            <id>opensaga</id>
            <name>OpenSAGA Repository</name>
            <url>http://www.opensaga.org/maven/content/groups/public</url>
        </repository>
    </repositories>

    <build>
        <finalName>exceed</finalName>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.types</include>
                    <include>**/*.js</include>
                    <include>**/*.json</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/js/components</directory>
                <targetPath>de/quinscape/exceed/components</targetPath>
                <includes>
                    <include>**/*.css</include>
                    <include>**/*.json</include>
                    <!-- js files are included in the gulp bundle -->
                </includes>
            </resource>
            <resource>
                <directory>src/main/base</directory>
                <targetPath>de/quinscape/exceed/base</targetPath>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>

                <executions>
                    <!--
                        First we only compile our jooq strategy to then generated our POJOS with it..
                    -->
                    <execution>
                        <id>compile-build-classes</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <includes>
                                <include>de/quinscape/exceed/tooling/**</include>
                            </includes>
                        </configuration>
                    </execution>
                    <!--
                        Then we compile the rest of the code
                    -->
                    <execution>
                        <id>default-compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <includes>
                                <include>de/quinscape/exceed/component/**</include>
                                <include>de/quinscape/exceed/domain/**</include>
                                <include>de/quinscape/exceed/expression/**</include>
                                <include>de/quinscape/exceed/model/**</include>
                                <include>de/quinscape/exceed/runtime/**</include>
                            </includes>
                            <excludes>
                                <exclude>**/*.jj</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>                                                 
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0-alpha-2</version>
                <executions>
                    <!-- Associate the read-project-properties goal with the initialize phase, to read the properties file. -->
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>src/main/resources/application.properties</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
                JOOQ code generation
            -->
            <plugin>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>3.6.2</version>

                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

                <dependencies>
                    <dependency>
                        <groupId>org.postgresql</groupId>
                        <artifactId>postgresql</artifactId>
                        <version>9.3-1102-jdbc4</version>
                    </dependency>
                </dependencies>

                <configuration>
                    <jdbc>
                        <driver>${database.driver}</driver>
                        <url>${database.url}</url>
                        <user>${database.username}</user>
                        <password>${database.password}</password>
                    </jdbc>

                    <generator>
                        <name>org.jooq.util.JavaGenerator</name>
                        <database>
                            <name>org.jooq.util.postgres.PostgresDatabase</name>
                            <includes>.*</includes>
                            <inputSchema>public</inputSchema>
                            <!--customTypes>
                                <customType>
                                    <name>UserJSON</name>
                                    <type>java.lang.Object</type>
                                    <binding>de.quinscape.mip.app.db.JSONBBinding</binding>
                                </customType>
                            </customTypes>
                            <forcedTypes>
                                <forcedType>
                                    <name>UserJSON</name>
                                    <types>jsonb</types>
                                </forcedType>
                            </forcedTypes-->
                        </database>
                        <target>
                            <packageName>de.quinscape.exceed.domain</packageName>
                            <directory>src/main/java</directory>
                        </target>
                        <generate>
                            <daos>false</daos>
                            <pojos>true</pojos>
                            <records>true</records>
                            <generatedAnnotation>true</generatedAnnotation>
                            <validationAnnotations>true</validationAnnotations>
                        </generate>
                        <strategy>
                            <name>de.quinscape.exceed.tooling.GeneratorStrategy</name>
                        </strategy>
                    </generator>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.6</version>
                <executions>

                    <execution>
                        <!-- optional: you don't really need execution ids, but it looks nice in your build log. -->
                        <id>install node and yarn</id>
                        <goals>
                            <goal>install-node-and-yarn</goal>
                        </goals>
                        <!-- optional: default phase is "generate-resources" -->
                        <phase>generate-resources</phase>
                        <configuration>
                            <nodeVersion>v8.7.0</nodeVersion>
                            <yarnVersion>v1.2.1</yarnVersion>

                            <!-- optional: where to download node from. Defaults to https://nodejs.org/dist/ -->
                            <!--
                            <nodeDownloadRoot>http://myproxy.example.org/nodejs/</nodeDownloadRoot>
                            -->
                            <!-- optional: where to download yarn from. Defaults to https://github.com/yarnpkg/yarn/releases/download/ -->
                            <!--
                            <yarnDownloadRoot>http://myproxy.example.org/yarn/</yarnDownloadRoot>
                            -->
                        </configuration>
                    </execution>

                    <execution>
                        <id>yarn install</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>

                        <!-- optional: default phase is "generate-resources" -->
                        <phase>generate-resources</phase>

                        <configuration>
                            <!-- optional: The default argument is actually
                            "install", so unless you need to run some other npm command,
                            you can remove this whole <configuration> section.
                            -->
                            <arguments>install</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>yarn build</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <!-- optional: The default argument is actually
                            "install", so unless you need to run some other npm command,
                            you can remove this whole <configuration> section.
                            -->
                            <arguments>run dist</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>yarn test</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <arguments>test</arguments>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.4.0</version>
                <executions>
                    <execution>
                        <id>generate-component-classes</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>
                                java
                            </goal>
                        </goals>
                        <configuration>
                            <mainClass>de.quinscape.exceed.tooling.GenerateComponentClasses</mainClass>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-resource-lists</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>
                                java
                            </goal>
                        </goals>
                        <configuration>
                            <mainClass>de.quinscape.exceed.tooling.GenerateLibraryResourceLists</mainClass>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
