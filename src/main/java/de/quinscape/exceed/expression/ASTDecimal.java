/* Generated By:JJTree: Do not edit this line. ASTDecimal.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package de.quinscape.exceed.expression;

import de.quinscape.exceed.model.domain.DomainProperty;
import de.quinscape.exceed.model.domain.PropertyModel;
import de.quinscape.exceed.model.meta.PropertyType;
import de.quinscape.exceed.runtime.domain.property.DecimalConverter;

import java.math.BigDecimal;

public class ASTDecimal
    extends SimpleNode
    implements LiteralValueNode
{

    private BigDecimal value;

    private PropertyModel propertyModel;


    public ASTDecimal(int id)
    {
        super(id);
    }


    public ASTDecimal(ExpressionParser p, int id)
    {
        super(p, id);
    }


    /**
     * Accept the visitor.
     **/
    public Object jjtAccept(ExpressionParserVisitor visitor, Object data)
    {

        return
            visitor.visit(this, data);
    }


    public BigDecimal getValue()
    {
        return value;
    }


    public void setValue(BigDecimal value)
    {
        this.value = value;
        propertyModel = DomainProperty.builder()
            .withType(PropertyType.DECIMAL)
            .withConfig(DecimalConverter.DECIMAL_PLACES, Math.max(value.scale(), 1))
            .build();
    }


    @Override
    public Object getLiteralValue()
    {
        return value;
    }



    @Override
    public PropertyModel getLiteralType()
    {

        return propertyModel;
    }

    @Override
    public String toString()
    {
        return super.toString() + " " + value;
    }
}
/* JavaCC - OriginalChecksum=8c37e811907901d099500182ddb9ca76 (do not edit this line) */
