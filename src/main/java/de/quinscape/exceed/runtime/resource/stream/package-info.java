/**
 * Contains the implementation of the exceed expression language, parts of which are generated by JavaCC based on
 * a jjtree grammar (see src/main/resources/Expression.jjt )
 *
 * The language is a subset of Javascript. It has:
 *
 *  <ul>
 *      <li>identifier</li>
 *      <li>arithmetic, equality and relational operators</li>
 *      <li>functions and methods</li>
 *      <li>literals for arrays, maps, single-quoted strings, numbers, booleans and null (JSONish)</li>
 *      <li>Assignment as syntactic sugar</li>
 *  </ul>
 *
 *  The parser itself converts expression strings into AST trees starting with an {@link de.quinscape.exceed.expression.ASTExpression} root.
 *  <p>
 *      The AST then has to undergo further validation to check if the used identifiers, properties and methods do exist in the
 *      the different contexts the expressions are used.
 *  </p>
 *  <p>
 *      While the view directly evaluates the expression tree against the current runtime context, the domain querying expressions will be
 *      transformed into the equivalent SQL expression.
 *  </p>
 */
package de.quinscape.exceed.runtime.resource.stream;
