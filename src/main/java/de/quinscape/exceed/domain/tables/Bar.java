/**
 * This class is generated by jOOQ
 */
package de.quinscape.exceed.domain.tables;


import de.quinscape.exceed.domain.Keys;
import de.quinscape.exceed.domain.Public;
import de.quinscape.exceed.domain.tables.records.BarRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bar extends TableImpl<BarRecord> {

	private static final long serialVersionUID = 955756700;

	/**
	 * The reference instance of <code>public.bar</code>
	 */
	public static final Bar BAR = new Bar();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<BarRecord> getRecordType() {
		return BarRecord.class;
	}

	/**
	 * The column <code>public.bar.id</code>.
	 */
	public final TableField<BarRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.length(36).nullable(false), this, "");

	/**
	 * The column <code>public.bar.name</code>.
	 */
	public final TableField<BarRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

	/**
	 * The column <code>public.bar.foo_id</code>.
	 */
	public final TableField<BarRecord, String> FOO_ID = createField("foo_id", org.jooq.impl.SQLDataType.VARCHAR.length(36), this, "");

	/**
	 * Create a <code>public.bar</code> table reference
	 */
	public Bar() {
		this("bar", null);
	}

	/**
	 * Create an aliased <code>public.bar</code> table reference
	 */
	public Bar(String alias) {
		this(alias, BAR);
	}

	private Bar(String alias, Table<BarRecord> aliased) {
		this(alias, aliased, null);
	}

	private Bar(String alias, Table<BarRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<BarRecord> getPrimaryKey() {
		return Keys.PK_BAR;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<BarRecord>> getKeys() {
		return Arrays.<UniqueKey<BarRecord>>asList(Keys.PK_BAR);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<BarRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<BarRecord, ?>>asList(Keys.BAR__FK_BAR_FOO_ID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Bar as(String alias) {
		return new Bar(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Bar rename(String name) {
		return new Bar(name, null);
	}
}
