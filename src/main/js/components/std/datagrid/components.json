{
    "components": {
        "DataGrid": {
            "description" : "Datagrid element",

            "classes" : [ "element", "iterative-context", "model-aware"],

            "vars": {
                "orderBy": "props.orderBy",
                "filter": "{}",
                "offset": "0",
                "limit": "props.limit",
                "params": "props.params"
            },
            "queries": {
                "result": "query( prop('type').fields( childFieldRefs()) ).filter( prop('filter') && combineChildFilters() ).orderBy( var('orderBy') ).limit( var('limit') ).offset( var('offset')).params(var('params'))"
            },
            "propTypes": {
                "type": {
                    "description" : "Type expression. Usually just a type identifier '{ MyType }'",

                    "client": false,
                    "type" : "QUERY_EXPRESSION",
                    "rule" : "domainType()"
                },
                "orderBy": {
                    "description" : "Field name to order the datagrid by default.",

                    "client": false,
                    "rule": "fieldListOf(query(prop('type')))"
                },
                "filter": {
                    "description" : "Filter expression",

                    "type" : "FILTER_EXPRESSION",
                    "client": false,
                    "rule": "filterExpr(query(prop('type')))"
                },
                "limit": {
                    "description" : "Maximum number of rows to display per page.",
                    "client": false,
                    "type": "INTEGER",
                    "defaultValue" : "10"
                },
                "params": {
                    "description" : "SQL Parameters for query type queries",
                    "client": false,
                    "type": "MAP",
                    "defaultValue" : "{}"
                }
            },
            "propWizards" : {
                "type": {
                    "wizard": "DataGridTypeWizard",
                    "title": "Configure Query",
                    "description": "Open Query join dialog for complex queries"
                }
            },
            "providesContext" : "DataCursor",
            "childRule" : "component('DataGrid.Column')",
            "parentRule" : "!parentHasClass('iterative-context')"
        },
        "DataGrid.Column": {
            "providesContext" : "DataCursor",
            "propTypes": {
                "name": {
                    "description" : "Field name for this column",
                    "type" : "FIELD_REFERENCE",
                    "rule": "fieldOf(parent.prop('type'))",
                    "required" : true
                },
                "filterTemplate": {
                    "description" : "Filter template to use for the user-defined filtering. <code>field()</code> is the current field value, <code>filterValue()</code> the current user input into the filter field.",

                    "type": "FILTER_EXPRESSION",
                    "defaultValue" : "field().contains(filterValue())",
                    "client" : false
                },
                "heading": {
                    "description" : "Heading to use for this column. Default is something like <code>{ i18n('MyType.myField') }</code>",

                    "type": "PLAINTEXT"
                },

                "context" : {
                    "type" : "CURSOR_EXPRESSION",
                    "defaultValue" : "context[props.name]",
                    "contextType" : "DataCursor"
                }
            },
            "templates" : [{
                "wizard" : "DataGridColumnWizard",
                "title" : "configure..."

            }],
            "childRule" : "hasClass('element')"
        }
    }
}
